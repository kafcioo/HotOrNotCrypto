'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sortBy = _interopDefault(require('lodash.sortby'));
var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var matchSorter = _interopDefault(require('match-sorter'));

var calculatePages = function calculatePages(items, itemsPerPage) {
  if (typeof items !== 'number' || typeof itemsPerPage !== 'number') {
    throw new Error('items and itemsPerPage should both be a number');
  }
  return Math.ceil(items / itemsPerPage);
};

var sortData = function sortData(data, key) {
  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';

  var sorted = sortBy(data, key);
  return direction === 'desc' ? sorted.reverse() : sorted;
};

var paginateData = function paginateData(data, activePage, itemsPerPage) {
  var from = activePage * itemsPerPage;
  var to = from + itemsPerPage;
  if (typeof activePage !== 'number' || typeof itemsPerPage !== 'number') {
    throw new Error('activePage and itemsPerPage should both be a number');
  }
  return data.slice(from, to);
};

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataSort = function (_React$Component) {
  _inherits(DataSort, _React$Component);

  function DataSort() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DataSort);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DataSort.__proto__ || Object.getPrototypeOf(DataSort)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      sortBy: _this.props.defaultSortBy || null,
      direction: _this.props.defaultDirection || 'asc',
      pages: null,
      activePage: _this.props.defaultActivePage || 0,
      data: [],
      searchQuery: ''
    }, _this.reset = function () {
      _this.setState({
        sortBy: null,
        direction: 'asc',
        activePage: 0
      });
    }, _this.prevPage = function () {
      if (_this.props.paginate === null) {
        return;
      }

      var _ref2 = _this.isPaginationControlled() ? _this.props : _this.state,
          activePage = _ref2.activePage;

      if (activePage === 0) {
        return;
      }
      _this.goToPage(activePage - 1);
    }, _this.nextPage = function () {
      if (_this.props.paginate === null) {
        return;
      }

      var _ref3 = _this.isPaginationControlled() ? _this.props : _this.state,
          activePage = _ref3.activePage;

      var pages = _this.state.pages;

      if (activePage + 1 < pages) {
        _this.goToPage(activePage + 1);
      }
    }, _this.goToPage = function (activePage) {
      if (_this.props.paginate === null) {
        return;
      }
      if (typeof activePage !== 'number' || activePage < 0 || activePage > _this.state.pages) {
        return;
      }
      _this.setState({ activePage: activePage });
    }, _this.setSortBy = function (sortBy$$1) {
      _this.setState({ sortBy: sortBy$$1 });
    }, _this.setDirection = function (direction) {
      if (direction === 'asc' || direction === 'desc') {
        _this.setState({ direction: direction });
      }
    }, _this.toggleDirection = function () {
      _this.setState({
        direction: _this.state.direction === 'asc' ? 'desc' : 'asc'
      });
    }, _this.search = function (value) {
      _this.setState({ searchQuery: value });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DataSort, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          itemsPerPage = _props.itemsPerPage,
          paginate = _props.paginate,
          data = _props.data;

      if (paginate) {
        this.setState({ pages: calculatePages(data.length, itemsPerPage) });
      }
    }
  }, {
    key: 'isPaginationControlled',
    value: function isPaginationControlled() {
      return typeof this.props.activePage !== 'undefined';
    }
  }, {
    key: 'isSortByControlled',
    value: function isSortByControlled() {
      return typeof this.props.sortBy !== 'undefined';
    }
  }, {
    key: 'isDirectionControlled',
    value: function isDirectionControlled() {
      return typeof this.props.direction !== 'undefined';
    }
  }, {
    key: 'isSearchControlled',
    value: function isSearchControlled() {
      return typeof this.props.searchQuery !== 'undefined';
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          render = _props2.render,
          paginate = _props2.paginate,
          itemsPerPage = _props2.itemsPerPage,
          data = _props2.data;

      var _ref4 = this.isPaginationControlled() ? this.props : this.state,
          activePage = _ref4.activePage;

      var _ref5 = this.isSortByControlled() ? this.props : this.state,
          sortBy$$1 = _ref5.sortBy;

      var _ref6 = this.isDirectionControlled() ? this.props : this.state,
          direction = _ref6.direction;

      var _ref7 = this.isSearchControlled() ? this.props : this.state,
          searchQuery = _ref7.searchQuery;

      var pages = this.state.pages;

      var keys = this.props.searchInKeys || data && data.length ? Object.keys(data[0]) : [];

      // Search & sort data
      var searched = searchQuery === '' ? data : matchSorter(data, searchQuery, { keys: keys });
      var sorted = sortBy$$1 === null ? searched : sortData(searched, sortBy$$1, direction);

      return typeof render !== 'function' ? null : render({
        data: paginate ? paginateData(sorted, activePage, itemsPerPage) : sorted,
        activePage: activePage,
        pages: pages,
        sortBy: sortBy$$1,
        direction: direction,
        searchQuery: searchQuery,
        toggleDirection: this.toggleDirection,
        reset: this.reset,
        prevPage: this.prevPage,
        nextPage: this.nextPage,
        goToPage: this.goToPage,
        setDirection: this.setDirection,
        setSortBy: this.setSortBy,
        search: this.search
      });
    }
  }]);

  return DataSort;
}(React.Component);

DataSort.propTypes = {
  data: PropTypes.array.isRequired,
  render: PropTypes.func,
  paginate: PropTypes.bool,
  sortBy: PropTypes.string,
  direction: PropTypes.string,
  itemsPerPage: PropTypes.number,
  activePage: PropTypes.number,
  defaultSortBy: PropTypes.string,
  defaultDirection: PropTypes.string,
  searchQuery: PropTypes.string,
  searchInKeys: PropTypes.array
};
DataSort.defaultProps = {
  data: [],
  itemsPerPage: 10,
  paginate: false
};

module.exports = DataSort;
